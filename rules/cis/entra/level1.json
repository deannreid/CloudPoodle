{
  "version": "1.0",
  "profile": "CIS Microsoft 365 Foundations (Entra) — Level 1",
  "rules": [
    {
      "id": "1.1",
      "level": 1,
      "title": "Security Defaults enabled",
      "description": "Ensure tenant-wide Security Defaults are enabled to enforce basic protections.",
      "severity": "high",
      "source": { "module": "tenant_overview", "path": "summary.Security Defaults Enabled" },
      "test": { "op": "equals", "value": true },
      "pass_message": "Security Defaults are enabled.",
      "fail_message": "Security Defaults are disabled.",
      "remediation": "Enable Security Defaults or enforce equivalent Conditional Access baselines.",
      "tags": ["tenant","security-defaults","baseline"]
    },
    {
      "id": "1.2",
      "level": 1,
      "title": "Limit Global Administrators",
      "description": "Keep the number of Global Administrator assignments low.",
      "severity": "high",
      "source": { "module": "user_assessment", "path": "role_assignments_overview[Role=Global Administrator].Assignees" },
      "test": { "op": "lte", "value": 5 },
      "pass_message": "Global Admin count within recommended bounds.",
      "fail_message": "Too many Global Admins assigned.",
      "remediation": "Reduce persistent GA assignments; use PIM/just-in-time elevation.",
      "tags": ["roles","privileged","admins"]
    },
    {
      "id": "1.3",
      "level": 1,
      "title": "No guest users have directory roles",
      "description": "Guest users should not hold directory roles.",
      "severity": "high",
      "source": { "module": "user_assessment", "path": "user_details" },
      "test": {
        "op": "count_where",
        "filter": "Type == 'Guest' && (Dir Roles || 0) > 0",
        "compare": { "op": "eq", "value": 0 }
      },
      "pass_message": "No guests are assigned directory roles.",
      "fail_message": "Guest users found with directory roles.",
      "remediation": "Remove directory roles from guest accounts.",
      "tags": ["roles","guests"]
    },
    {
      "id": "1.4",
      "level": 1,
      "title": "MFA coverage for privileged users",
      "description": "All users with directory roles should have MFA-capable methods present.",
      "severity": "high",
      "source": { "module": "user_assessment" },
      "test": {
        "op": "ratio_gte",
        "numerator_path": "user_details[Dir Roles>0 && Details.Signals.MFA_Present==true]",
        "denominator_path": "user_details[Dir Roles>0]",
        "value": 1.0
      },
      "pass_message": "All privileged users have MFA.",
      "fail_message": "Some privileged users lack MFA.",
      "remediation": "Require MFA for all accounts with directory roles.",
      "tags": ["mfa","privileged"]
    },
    {
      "id": "1.5",
      "level": 1,
      "title": "MFA enrollment rate ≥ 80%",
      "description": "Target at least 80% MFA enrollment across the tenant.",
      "severity": "medium",
      "source": { "module": "user_assessment" },
      "test": {
        "op": "ratio_gte",
        "numerator_path": "summary.MFA Enrolled",
        "denominator_path": "summary.Total Users",
        "value": 0.8
      },
      "pass_message": "MFA enrollment meets or exceeds 80%.",
      "fail_message": "MFA enrollment below 80%.",
      "remediation": "Roll out MFA registration campaigns or enforce via Conditional Access.",
      "tags": ["mfa","adoption"]
    },
    {
      "id": "1.6",
      "level": 1,
      "title": "No disabled users with directory roles",
      "description": "Disabled accounts should not retain directory role assignments.",
      "severity": "medium",
      "source": { "module": "user_assessment", "path": "user_details" },
      "test": {
        "op": "count_where",
        "filter": "Status == 'Disabled' && (Dir Roles || 0) > 0",
        "compare": { "op": "eq", "value": 0 }
      },
      "pass_message": "No disabled users have directory roles.",
      "fail_message": "Disabled users found with directory roles.",
      "remediation": "Remove roles from disabled accounts.",
      "tags": ["hygiene","roles"]
    },
    {
      "id": "1.7",
      "level": 1,
      "title": "No stale enabled accounts (>90 days without sign-in)",
      "description": "Enabled accounts should be used periodically or removed.",
      "severity": "medium",
      "source": { "module": "user_assessment", "path": "user_details" },
      "test": {
        "op": "count_where",
        "filter": "Status == 'Enabled' && (Details.General.LastSignInDays || 99999) > 90",
        "compare": { "op": "eq", "value": 0 }
      },
      "pass_message": "No stale enabled accounts over 90 days.",
      "fail_message": "Stale enabled accounts detected.",
      "remediation": "Review and disable/remove unused accounts.",
      "tags": ["lifecycle","account-hygiene"]
    },
    {
      "id": "1.8",
      "level": 1,
      "title": "No expired app/service principal credentials",
      "description": "Expired app secrets/certs increase risk.",
      "severity": "high",
      "source": { "module": "app_credentials_expiry", "path": "summary.Expired" },
      "test": { "op": "equals", "value": 0 },
      "pass_message": "No expired credentials.",
      "fail_message": "Expired credentials found.",
      "remediation": "Rotate or remove expired credentials.",
      "tags": ["apps","credentials"]
    },
    {
      "id": "1.9",
      "level": 1,
      "title": "No app credentials expiring in <10 days",
      "description": "Avoid last-minute rotations for app identities.",
      "severity": "medium",
      "source": { "module": "app_credentials_expiry", "path": "summary.Critical (<10d)" },
      "test": { "op": "equals", "value": 0 },
      "pass_message": "No credentials expiring in <10 days.",
      "fail_message": "Credentials expiring in <10 days detected.",
      "remediation": "Rotate app secrets/certificates before they near expiry.",
      "tags": ["apps","credentials"]
    },
    {
      "id": "1.10",
      "level": 1,
      "title": "All default domain settings valid",
      "description": "Ensure a default domain exists and domains are verified.",
      "severity": "low",
      "source": { "module": "tenant_overview" },
      "test": {
        "op": "all",
        "checks": [
          { "path": "summary.Default Domain", "op": "not_equals", "value": "N/A" },
          { "path": "summary.Verified Domains", "op": "gte", "value": 1 }
        ]
      },
      "pass_message": "Default domain present and at least one verified domain.",
      "fail_message": "Default domain missing or no verified domains.",
      "remediation": "Verify domains and set an appropriate default domain.",
      "tags": ["domains","configuration"]
    },
    {
      "id": "1.11",
      "level": 1,
      "title": "Federated domains reviewed (recommended <= 0 unless required)",
      "description": "Federation increases configuration surface; keep minimal unless needed.",
      "severity": "medium",
      "source": { "module": "tenant_overview", "path": "summary.Federated Domains" },
      "test": { "op": "lte", "value": 0 },
      "pass_message": "No federated domains (or per policy threshold).",
      "fail_message": "Federated domains present — ensure governance.",
      "remediation": "Review federation trust and certificate rollover processes.",
      "tags": ["domains","federation"]
    },
    {
      "id": "1.12",
      "level": 1,
      "title": "Branding configured",
      "description": "Custom branding reduces phishing risk by familiarizing users with the sign-in experience.",
      "severity": "low",
      "source": { "module": "tenant_overview", "path": "summary.Branding Configured" },
      "test": { "op": "equals", "value": true },
      "pass_message": "Branding is configured.",
      "fail_message": "Branding is not configured.",
      "remediation": "Configure sign-in branding elements (logo, background, text).",
      "tags": ["branding","phishing"]
    },
    {
      "id": "1.13",
      "level": 1,
      "title": "Default user role: cannot add guests",
      "description": "Limit guest invitations at the default user role.",
      "severity": "medium",
      "source": { "module": "tenant_overview", "path": "defaultUserRoleKV[Field=canAddGuests].Value" },
      "test": { "op": "equals", "value": false },
      "pass_message": "Default users cannot add guests.",
      "fail_message": "Default users can add guests.",
      "remediation": "Set authorizationPolicy.defaultUserRolePermissions.allowedToInviteGuests=false.",
      "tags": ["authorizationPolicy","guests"]
    },
    {
      "id": "1.14",
      "level": 1,
      "title": "Default user role: cannot create apps",
      "description": "Limit ungoverned app registration.",
      "severity": "medium",
      "source": { "module": "tenant_overview", "path": "defaultUserRoleKV[Field=canCreateApps].Value" },
      "test": { "op": "equals", "value": false },
      "pass_message": "Default users cannot create apps.",
      "fail_message": "Default users can create apps.",
      "remediation": "Set authorizationPolicy.defaultUserRolePermissions.allowedToCreateApps=false.",
      "tags": ["authorizationPolicy","apps"]
    },
    {
      "id": "1.15",
      "level": 1,
      "title": "Default user role: cannot create security groups",
      "description": "Restrict group creation to controlled processes.",
      "severity": "low",
      "source": { "module": "tenant_overview", "path": "defaultUserRoleKV[Field=canCreateSecurityGroups].Value" },
      "test": { "op": "equals", "value": false },
      "pass_message": "Default users cannot create security groups.",
      "fail_message": "Default users can create security groups.",
      "remediation": "Set authorizationPolicy.defaultUserRolePermissions.allowedToCreateSecurityGroups=false.",
      "tags": ["authorizationPolicy","groups"]
    },
    {
      "id": "1.16",
      "level": 1,
      "title": "No groups assigned directory roles",
      "description": "Avoid assigning directory roles to groups unless strictly required.",
      "severity": "high",
      "source": { "module": "group_audit", "path": "group_details" },
      "test": {
        "op": "count_where",
        "filter": "(Details.DirectoryRoleAssignments || []).length > 0",
        "compare": { "op": "eq", "value": 0 }
      },
      "pass_message": "No groups have directory role assignments.",
      "fail_message": "Groups found with directory roles.",
      "remediation": "Reassign roles to specific eligible users with PIM; remove group role assignments.",
      "tags": ["groups","roles"]
    },
    {
      "id": "1.17",
      "level": 1,
      "title": "Groups with role assignment have no guest members",
      "description": "Privileged groups should not include guest users.",
      "severity": "high",
      "source": { "module": "group_audit", "path": "group_details" },
      "test": {
        "op": "none_match",
        "filter": "(Details.DirectoryRoleAssignments || []).length > 0 && ((Details.Counts || {}).guests || 0) > 0"
      },
      "pass_message": "Privileged groups contain no guests.",
      "fail_message": "Guest members found in privileged groups.",
      "remediation": "Remove guest members from any group with directory roles.",
      "tags": ["groups","guests","roles"]
    },
    {
      "id": "1.18",
      "level": 1,
      "title": "No service principals own privileged groups",
      "description": "Avoid non-human owners for groups with elevated privileges.",
      "severity": "medium",
      "source": { "module": "group_audit", "path": "group_details" },
      "test": {
        "op": "none_match",
        "filter": "(Details.DirectoryRoleAssignments || []).length > 0 && (Details['Owners (Service Principals)'] || []).length > 0"
      },
      "pass_message": "Privileged groups have no service principal owners.",
      "fail_message": "Service principal owners detected on privileged groups.",
      "remediation": "Replace SP owners with accountable human owners; use app roles instead of ownership.",
      "tags": ["groups","owners","service-principals"]
    },
    {
      "id": "1.19",
      "level": 1,
      "title": "No guest Global Administrators",
      "description": "Global Administrator should not be assigned to guest accounts.",
      "severity": "high",
      "source": { "module": "user_assessment", "path": "user_details" },
      "test": {
        "op": "count_where",
        "filter": "Type == 'Guest' && (Details.DirectoryRoles || []).includes('Global Administrator')",
        "compare": { "op": "eq", "value": 0 }
      },
      "pass_message": "No guest Global Admins.",
      "fail_message": "Guest account(s) with Global Administrator found.",
      "remediation": "Remove GA from guest accounts immediately.",
      "tags": ["roles","guests","admins"]
    },
    {
      "id": "1.20",
      "level": 1,
      "title": "Application credential hygiene: warning window (<30 days) is empty",
      "description": "Target zero credentials within the 30-day warning window.",
      "severity": "low",
      "source": { "module": "app_credentials_expiry", "path": "summary.Warning (<30d)" },
      "test": { "op": "equals", "value": 0 },
      "pass_message": "No credentials within 30-day warning window.",
      "fail_message": "Credentials expiring in <30 days detected.",
      "remediation": "Rotate credentials proactively on a schedule.",
      "tags": ["apps","credentials","hygiene"]
    }
  ]
}